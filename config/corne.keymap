#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// dt-formatter: indent = "  "
// dt-formatter: multilineIntegerCellsIndent = "reindent"
// dt-formatter: multilineListCommaStyle = "leading"

&sk { /delete-property/ ignore-modifiers; };

/ {
  combos {
    compatible = "zmk,combos";

    caps_word {
      key-positions = <0 12>;
      bindings = <&caps_word>;
    };

    colemak-to-gaming {
      bindings = <&to 5>;
      key-positions = <36 41>;
      layers = <0>;
    };

    gaming-to-colemak {
      bindings = <&to 0>;
      key-positions = <36 41>;
      layers = <5>;
    };
  };

  behaviors {
    as_ht: autoshift_hold_tap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "AUTOSHIFT_HOLD_TAP";
      bindings = <&shift>, <&kp>;

      tapping-term-ms = <190>;
    };

    hml: homewrow_mods_left {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_LEFT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
    };

    hmr: homewrow_mods_right {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_RIGHT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
    };

    capdance: capdance {
      compatible = "zmk,behavior-tap-dance";
      label = "CAPDANCE";
      #binding-cells = <0>;
      bindings = <&caps_word>, <&kp CAPS>;
    };

    volknob: volume_encoder {
      compatible = "zmk,behavior-sensor-rotate";
      label = "ENCODER_VOLUME_KNOB";
      #sensor-binding-cells = <0>;
      bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>;
    };

    rgbknob: rgb_encoder {
      compatible = "zmk,behavior-sensor-rotate-var";
      label = "ENCODER_RGB";
      #sensor-binding-cells = <2>;
      bindings = <&rgb_ug>, <&rgb_ug>;
    };
  };

  conditional_layers { compatible = "zmk,conditional-layers"; };

  keymap {
    compatible = "zmk,keymap";

    Colemak-DH {
      bindings = <
        &kp ESCAPE  &kp Q  &kp W  &kp F      &kp P  &kp B        &kp J      &kp L  &kp U     &kp Y  &kp DELETE  &kp BSPC
        &kp LSHFT   &kp A  &kp R  &kp S      &kp T  &kp G        &kp M      &kp N  &kp E     &kp I  &kp O       &lt 4 LEFT_ALT
        &kp LCTRL   &kp Z  &kp X  &kp C      &kp V  &kp COMMA    &kp SLASH  &kp K  &kp H     &kp D  &kp PERIOD  &mo 3
                                  &lt 6 TAB  &mo 2  &kp SPACE    &kp RET    &mo 1  &kp LGUI
      >;
    };

    Nav {
      bindings = <
        &trans  &none  &none  &none   &none   &none     &kp K_REDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE  &kp K_UNDO  &trans
        &none   &none  &none  &none   &none   &none     &kp CAPS    &kp LEFT   &kp DOWN    &kp UP       &kp RIGHT   &trans
        &none   &none  &none  &none   &none   &none     &kp INSERT  &kp HOME   &kp PG_DN   &kp PG_UP    &kp END     &none
                              &trans  &trans  &trans    &trans      &trans     &trans
      >;
    };

    Numbers {
      bindings = <
        &trans  &none  &none  &none   &none   &none     &kp EQUAL  &kp N7  &kp N8  &kp N9  &kp MINUS  &trans
        &none   &none  &none  &none   &none   &none     &kp BSLH   &kp N4  &kp N5  &kp N6  &kp PLUS   &none
        &none   &none  &none  &none   &none   &none     &kp STAR   &kp N1  &kp N2  &kp N3  &kp DOT    &none
                              &trans  &trans  &trans    &trans     &kp N0  &trans
      >;
    };

    Symbols {
      bindings = <
        &trans  &kp GRAVE      &kp LESS_THAN      &kp GREATER_THAN  &kp LEFT_BRACE        &kp RIGHT_BRACE          &kp EXCLAMATION  &kp AT_SIGN  &kp POUND      &kp NUHS      &kp DOLLAR      &trans
        &none   &kp PIPE       &kp COLON          &kp SEMICOLON     &kp LEFT_BRACKET      &kp RBKT                 &kp PERCENT      &kp CARET    &kp AMPERSAND  &kp ASTERISK  &kp UNDERSCORE  &none
        &none   &kp BACKSLASH  &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp MINUS        &kp PLUS     &kp EQUAL      &kp TILDE     &trans          &none
                                                  &trans            &trans                &trans                   &trans           &trans       &trans
      >;
    };

    Function {
      bindings = <
        &trans  &kp F12  &kp F7  &kp F8  &kp F9  &kp PRINTSCREEN    &none   &none   &none   &none  &none  &trans
        &none   &kp F11  &kp F4  &kp F5  &kp F6  &kp SCROLLLOCK     &none   &none   &none   &none  &none  &none
        &none   &kp F10  &kp F1  &kp F2  &kp F3  &kp PAUSE_BREAK    &none   &none   &none   &none  &none  &none
                                 &trans  &trans  &trans             &trans  &trans  &trans
      >;
    };

    gaming {
      bindings = <
        &kp ESC    &kp Q  &kp W  &kp E   &kp R   &kp T     &kp Y   &kp U   &kp I   &kp O     &kp P     &kp BSPC
        &kp LSHFT  &kp A  &kp S  &kp D   &kp F   &kp G     &kp H   &kp J   &kp K   &kp L     &kp UP    &kp LEFT_ALT
        &kp LCTRL  &kp Z  &kp X  &kp C   &kp V   &kp B     &kp N   &kp M   &kp F5  &kp LEFT  &kp DOWN  &kp RIGHT
                                 &trans  &trans  &trans    &trans  &trans  &trans
      >;
    };

    media {
      bindings = <
        &none  &none  &none  &none  &none  &none    &kp C_REWIND    &none             &kp K_MUTE    &none            &kp C_FAST_FORWARD  &none
        &none  &none  &none  &none  &none  &none    &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_VOL_DN  &kp C_VOLUME_UP  &kp C_NEXT          &none
        &none  &none  &none  &none  &none  &none    &none           &none             &none         &none            &none               &none
                             &none  &none  &none    &none           &none             &none
      >;
    };
  };
};
